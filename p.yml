image: atlassian/pipelines-awscli

pipelines:
  default:
   - step:
       script:
        - echo "This script runs on all branches that don't have any specific pipeline assigned in 'branches'."
  branches:
    master:
      - step:
          script:
            - echo "These steps run on master branch."
      - step:
          name: Build API Backend
          image: atlassian/pipelines-awscli
          trigger: manual
          services:
           - docker
          script:
      # Deploying an image built from pipelines
           - docker build -t "${BACKEND_IMAGE_NAME}":latest .
           - $(aws ecr get-login --no-include-email --region us-west-2)
           - docker push "${BACKEND_IMAGE_NAME}":latest
      - step:
          name: Deploy to Staging
          image: atlassian/pipelines-awscli
          deployment: staging 
          trigger: manual
          services:
           - docker
          script:
            - $(aws ecr get-login --no-include-email --region us-west-2)
            - docker pull "${BACKEND_IMAGE_NAME}":latest
            - docker run -e MIGRATE="true" -e dbhost="${STAGING_DB_HOST}" -e dbuser="${STAGING_DB_USER}" -e dbpassword="${STAGING_DB_PASSWORD}" -e dbname="${STAGING_DB_NAME}" "${BACKEND_IMAGE_NAME}":latest
            - docker tag "${BACKEND_IMAGE_NAME}":latest "${BACKEND_IMAGE_NAME}":staging
            - docker push "${BACKEND_IMAGE_NAME}":staging
            - aws ecs update-service --cluster "${ECS_STAGING_CLUSTER_NAME}" --service apibackend-testing --force-new-deployment
      - step:
          name: Deploy to Production
          image: atlassian/pipelines-awscli
          deployment: production  
          trigger: manual
          services:
           - docker
          script:
            - $(aws ecr get-login --no-include-email --region us-west-2)
            - docker pull "${BACKEND_IMAGE_NAME}":staging
            - docker run -e MIGRATE="true" -e dbhost="${PROD_DB_HOST}" -e dbuser="${PROD_DB_USER}" -e dbpassword="${PROD_DB_PASSWORD}" -e dbname="${PROD_DB_NAME}" "${BACKEND_IMAGE_NAME}":staging
            - docker tag "${BACKEND_IMAGE_NAME}":staging "${BACKEND_IMAGE_NAME}":production
            - docker push "${BACKEND_IMAGE_NAME}":production
            - aws ecs update-service --cluster "${ECS_PRODUCTION_CLUSTER_NAME}" --service api-backend --force-new-deployment
    develop:
      - step:
          script:
            - echo "These steps run on develop branch."
      - step:
          name: Build API Backend
          image: atlassian/pipelines-awscli
          trigger: automatic
          services:
           - docker
          script:
      # Deploying an image built from pipelines
           - docker build -t "${BACKEND_IMAGE_NAME}":latest .
           - $(aws ecr get-login --no-include-email --region us-west-2)
           - docker push "${BACKEND_IMAGE_NAME}":latest
      - step:
          name: Deploy to Staging
          image: atlassian/pipelines-awscli
          deployment: staging 
          trigger: automatic
          services:
           - docker
          script:
            - $(aws ecr get-login --no-include-email --region us-west-2)
            - docker pull "${BACKEND_IMAGE_NAME}":latest
            - docker run -e MIGRATE="true" -e dbhost="${STAGING_DB_HOST}" -e dbuser="${STAGING_DB_USER}" -e dbpassword="${STAGING_DB_PASSWORD}" -e dbname="${STAGING_DB_NAME}" "${BACKEND_IMAGE_NAME}":latest
            - docker tag "${BACKEND_IMAGE_NAME}":latest "${BACKEND_IMAGE_NAME}":staging
            - docker push "${BACKEND_IMAGE_NAME}":staging
            - aws ecs update-service --cluster "${ECS_STAGING_CLUSTER_NAME}" --service apibackend-testing --force-new-deployment